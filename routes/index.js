const express = require("express"),
  router = express.Router(),
  bcrypt = require("bcrypt"),
  saltRounds = 10,
  passport = require("passport"),
  validator = require("validator");

const db = require("../db/db");

router.get("/", (req, res) => {
  res.render("index", {
    page: "index"
  });
});

router.get("/login", (req, res) => {
  res.render("login", {
    hiddenStoryId: req.query.storyId,
    message: req.flash("error")
  });
});

router.post("/login", (req, res) => {
  passport.authenticate("local", {
    successRedirect: req.body.hiddenStoryId ? `/stories/${req.body.hiddenStoryId}` : 'stories',
    failureRedirect: "/login",
    failureFlash: true
  })(req, res)
});

router.get("/register", (req, res) => {
  res.render("register");
});

router.post("/register", (req, res) => {
  const username = validator.escape(req.body.rUsername.trim()),
    email = validator.escape(req.body.rEmail.trim()),
    password = validator.escape(req.body.rPassword.trim()),
    confirmPassword = validator.escape(req.body.rConfirmPassword.trim());

  if (!username || !email || !password || !confirmPassword) {
    req.flash("error", "Please, fill in all fields!");
    return res.redirect("back");
  } else if (!validator.isEmail(email)) {
    req.flash("error", "Please, enter a valid email!");
    return res.redirect("back");
  }
  if (!validator.equals(password, confirmPassword)) {
    req.flash("error", "Password does not match the confirm password!");
    return res.redirect("back");
  }

  const sql = "INSERT INTO users (username, email, password) VALUES(?, ?, ?)";

  bcrypt.hash(password, saltRounds, (err, hashPassword) => {
    db.query(sql, [username, email, hashPassword], (err, results, fields) => {
      if (err) {
        req.flash("error", err.message);
        return res.redirect("back");
      }
      const sql2 = "SELECT id, username FROM users WHERE id = ?";
      db.query(sql2, [results.insertId], (err, user) => {
        if (err) {
          req.flash("error", err.message);
          return res.redirect("back");
        }
        const registeredUser = {
          user_id: user[0].id,
          username: user[0].username
        };
        req.login(registeredUser, err => {
          res.redirect("/stories");
        }); // passport login function
      });
    });
  });
});

router.get("/logout", (req, res) => {
  req.logout(); // passport logout method
  req.session.destroy(function (err) {
    if (err) return next(err);
    res.clearCookie("connect.sid"); // delete cookie generated by passport
    res.redirect("/stories");
  });
});

passport.serializeUser((user, done) => {
  done(null, user);
});

passport.deserializeUser((user, done) => {
  done(null, user);
});

module.exports = router;